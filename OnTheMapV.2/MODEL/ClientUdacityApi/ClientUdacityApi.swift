//
//  ClientUdacityApi.swift
//  OnTheMapV.2
//
//  Created by mairo on 03/12/2022.
//

import Foundation
import UIKit

class ClientUdacityApi {
    
    struct Auth {
        static var userId = ""
        static var objectId = ""
        static var firstName = ""
        static var lastName = ""
        static var sessionId = ""
        static var pinAlreadyPosted = false
    }
    
    enum Endpoints {
        // URL components
        static let base = "https://onthemap-api.udacity.com/v1"
        static let studentLocationPath = "/StudentLocation"
        static let sessionPath = "/session"
        static let userIdPath = "/users"
        
        // MARK: Parse API: GET-ting Student Locations
        // To get multiple student locations at one time, you'll want to use the following API method: https://onthemap-api.udacity.com/v1/StudentLocation Optional parameter: limit, skip, order, uniqueKey. Method type: GET.
        case studentLocation // get multiple student locations at one time
        case limit(Int) // app downloads the (100) most recent locations posted by students.
        case skip(Int, Int) // limit to paginate through results
        case order(limit: Int, sorted: String)
        case uniqueKey // user can post only one location
        case objectId // identify student location
        case sessionId // used for logging session
        case randomFakeUserData
        
        
        var stringValue: String {
            switch self {
                case .studentLocation:
                    return Endpoints.base + Endpoints.studentLocationPath // To get multiple student locations at one time, use the following API method: see link composed of base + studentLocationPath. Method type: GET. Optional parameter: limit, skip, order, uniqueKey (see code below)
                case .limit(let xyLastPostedLocations):
                    return Endpoints.base + Endpoints.studentLocationPath + "?limit=\(xyLastPostedLocations)" // limit - (Number) specifies the maximum number of StudentLocation objects to return in the JSON response. Example: URL + "?limit=100"
                case .skip(let xyLastPostedLocations, let limitToPaginate):
                    return Endpoints.base + Endpoints.studentLocationPath + "?limit=\(xyLastPostedLocations)" + "&skip=\(limitToPaginate)" // skip - (Number) use this parameter with limit to paginate through results. Example: URL + "?limit=200&skip=400"
                case .order(let xyLastPostedLocations, let keyName):
                    return Endpoints.base + Endpoints.studentLocationPath + "?limit=\(xyLastPostedLocations)" + "&order=\(keyName)" // order - (String) a comma-separate list of key names that specify the sorted order of the results. Prefixing a key name (e.g. updatedAt) with a negative sign reverses the order (default order is ascending). Example: URL + "?order=-updatedAt"
                case .uniqueKey:
                    return Endpoints.base + Endpoints.studentLocationPath + "?uniqueKey=\(Auth.userId)" // uniqueKey - (String) a unique key (user ID). Gets only student locations with a given user ID. Filtering by the user ID can be useful if the user has already posted a location (for example, pre-filling the location field). You probably won't need this since the user IDs are randomized. Example: URL + "?uniqueKey=1234"
                case .objectId:
                    return Endpoints.base + Endpoints.studentLocationPath + "/\(Auth.objectId)" // objectId: an auto-generated id/key generated by Parse which uniquely identifies a StudentLocation
                case .sessionId:
                    return Endpoints.base + Endpoints.sessionPath // sessionId: used for loggingIn
                case .randomFakeUserData:
                    return Endpoints.base + Endpoints.userIdPath + "/\(Auth.userId)" // randomFakeUserData: for fake randomuser IDs (see above comment for "uniqueKey")
            }
        }
        var url: URL {
            return URL(string: stringValue)!
        }
        
    }
    
    // MARK: helper method for making request (GET)
    // ...
    
    // MARK: POSTing a Session
    // To authenticate Udacity API requests, you need to get a session ID ("getSessionId: Bool" added). This is accomplished by using Udacityâ€™s session method:
    // https://onthemap-api.udacity.com/v1/session Method Type: POST. Required Parameters*: udacity(Dictionary), username(String), password(String)
    @discardableResult class func taskForPOSTRequest<RequestType: Encodable, ResponseType: Decodable>(url: URL, getSessionId: Bool, responseType: ResponseType.Type, body: RequestType, completion: @escaping (ResponseType?, Error?) -> Void) -> URLSessionDataTask {
        
        var request = URLRequest(url: url)
        
        request.httpMethod = "POST"
        request.httpBody = try! JSONEncoder().encode(body) // for .httpBody need required three parameters*
        request.addValue("application/json", forHTTPHeaderField: "Accept")
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            guard let data = data else {
                DispatchQueue.main.async {
                    completion(nil, error)
                }
                print("data failed")
                return
            }
            let decoder = JSONDecoder()
            do {
                
                let responseObject = try decoder.decode(ResponseType.self, from: data)
                DispatchQueue.main.async {
                    completion(responseObject, nil)
                }
            } catch { // do-catch within catch
                do {
                    let errorResponse = try decoder.decode(ErrorResponse.self, from: data) as Error
                    print("decoding failed during Login")
                    DispatchQueue.main.async {
                        completion(nil, errorResponse)
                    }
                } catch {
                    DispatchQueue.main.async {
                        completion(nil, error)
                    }
                }
            } // here end do-catch within catch
        }
        task.resume()
        return task
    }
    
    // MARK: helper login method
    // for login method need another helper method "getPublicUserData", for this one need "taskForGETReqeuest"
    // for what is this "getPublicUserData"? Probably for getting "fake" names ...
    
}
